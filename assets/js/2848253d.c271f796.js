"use strict";(self.webpackChunkprogramming_technology=self.webpackChunkprogramming_technology||[]).push([[9262],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(t),p=o,h=f["".concat(s,".").concat(p)]||f[p]||d[p]||i;return t?r.createElement(h,a(a({ref:n},u),{},{components:t})):r.createElement(h,a({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},13707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const i={title:"React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",sidebar_position:10},a=void 0,l={unversionedId:"structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",id:"structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",title:"React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",description:"\u524d\u8a00",source:"@site/programming-tech/structure-algorithm/10-\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/23-React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386.md",sourceDirName:"structure-algorithm/10-\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",slug:"/structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",permalink:"/structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",draft:!1,editUrl:"https://github.com/huiruo/programming-tech-website/programming-tech/structure-algorithm/10-\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/23-React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"React-\u7b97\u6cd5\u4e4b\u6df1\u5ea6\u4f18\u5148\u904d\u5386",sidebar_position:10},sidebar:"structureAlgorithm",previous:{title:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},next:{title:"\u8868\u793a\u65e0\u5411\u56fe\u7684\u6570\u636e\u7c7b\u578b",permalink:"/structure-algorithm/\u56fe-\u6df1\u5ea6\u4f18\u5148\u904d\u5386-\u5e7f\u5ea6\u4f18\u5148\u904d\u5386/\u8868\u793a\u65e0\u5411\u56fe\u7684\u6570\u636e\u7c7b\u578b"}},s={},c=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2},{value:"\u57fa\u4e8eReact 17",id:"\u57fa\u4e8ereact-17",level:2},{value:"4.\u5728React\u4e2d\u4f7f\u7528\u573a\u666f",id:"4\u5728react\u4e2d\u4f7f\u7528\u573a\u666f",level:4},{value:"4-1.ReactElement &quot;\u6811&quot;\u7684\u6784\u9020",id:"4-1reactelement-\u6811\u7684\u6784\u9020",level:4},{value:"4-2.fiber \u6811\u7684\u6784\u9020",id:"4-2fiber-\u6811\u7684\u6784\u9020",level:4},{value:"4-3.\u67e5\u627e context \u7684\u6d88\u8d39\u8282\u70b9",id:"4-3\u67e5\u627e-context-\u7684\u6d88\u8d39\u8282\u70b9",level:4},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:4}],u={toc:c},f="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(f,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,o.kt)("p",null,"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5bf9\u4e8e\u7406\u89e3\u524d\u7aef\u6846\u67b6\u662f\u600e\u6837\u5de5\u4f5c\u7684\u4ee5\u53ca\u5c06\u4f60\u7684\u77e5\u8bc6\u63d0\u5347\u5230\u66f4\u9ad8\u7684\u5c42\u6b21\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u3002"),(0,o.kt)("h2",{id:"\u53c2\u8003"},"\u53c2\u8003"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://blog.51cto.com/u_15098004/2611341\n")),(0,o.kt)("h2",{id:"\u57fa\u4e8ereact-17"},"\u57fa\u4e8eReact 17"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"React\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\u4e86\u5f88\u591a\u7b97\u6cd5\u6280\u5de7, \u4e3b\u8981\u5305\u542b\u4f4d\u8fd0\u7b97, \u6df1\u5ea6\u4f18\u5148\u904d\u5386, \u94fe\u8868\u64cd\u4f5c, \u6808\u64cd\u4f5c, \u5806\u6392\u5e8f\u7b49\n")),(0,o.kt)("h4",{id:"4\u5728react\u4e2d\u4f7f\u7528\u573a\u666f"},"4.\u5728React\u4e2d\u4f7f\u7528\u573a\u666f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5728react\u5f53\u4e2d\u7684\u4f7f\u7528\u975e\u5e38\u5178\u578b, \u6700\u4e3b\u8981\u7684\u4f7f\u7528\u65f6\u5728ReactElement\u548cfiber\u6811\u7684\u6784\u9020\u8fc7\u7a0b. \u5176\u6b21\u662f\u5728\u4f7f\u7528context\u65f6, \n\u9700\u8981\u6df1\u5ea6\u4f18\u5148\u5730\u67e5\u627e\u6d88\u8d39context\u7684\u8282\u70b9.\n")),(0,o.kt)("h4",{id:"4-1reactelement-\u6811\u7684\u6784\u9020"},'4-1.ReactElement "\u6811"\u7684\u6784\u9020'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ReactElement\u4e0d\u80fd\u7b97\u662f\u4e25\u683c\u7684\u6811\u7ed3\u6784, \u4e3a\u4e86\u65b9\u4fbf\u8868\u8ff0, \u540e\u6587\u90fd\u79f0\u4e4b\u4e3a\u6811.\n\n\u5728react-reconciler\u5305\u4e2d, ReactElement\u7684\u6784\u9020\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u4e5f\u662freconciler\u8c03\u548c\u8fc7\u7a0b. \u4e0efiber\u6811\u7684\u6784\u9020\u662f\u76f8\u4e92\u4ea4\u66ff, \n\u9010\u7ea7\u8fdb\u884c\u7684(\u5728fiber \u6811\u6784\u5efa\u7ae0\u8282\u4e2d\u8be6\u7ec6\u89e3\u8bfb, \u672c\u8282\u53ea\u4ecb\u7ecd\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4f7f\u7528\u573a\u666f).\n\nReactElement\u6811\u7684\u6784\u9020, \u5b9e\u9645\u4e0a\u5c31\u662f\u5404\u7ea7\u7ec4\u4ef6render\u4e4b\u540e\u7684\u603b\u548c. \u6574\u4e2a\u8fc7\u7a0b\u4f53\u73b0\u5728reconciler\u5de5\u4f5c\u5faa\u73af\u4e4b\u4e2d.\n")),(0,o.kt)("p",null,"\u6e90\u7801\u4f4d\u4e8eReactFiberWorkLoop.js\u4e2d, \u6b64\u5904\u4e3a\u4e86\u7b80\u660e, \u5df2\u7ecf\u5c06\u6e90\u7801\u4e2d\u4e0e dfs \u65e0\u5173\u7684\u65c1\u652f\u903b\u8f91\u53bb\u6389."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// https://github.com/facebook/react/blob/v17.0.1/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1558\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n    // 1. \u6700\u5916\u5c42\u5faa\u73af, \u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u80fd\u904d\u5386, \u4e0d\u4f1a\u9057\u6f0f\n    // Already timed out, so perform work without checking if we need to yield.\n    while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n    }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = unitOfWork.alternate;\n    setCurrentDebugFiberInDEV(unitOfWork);\n\n    let next;   // 2. beginWork\u662f\u5411\u4e0b\u63a2\u5bfb\u9636\u6bb5\n    if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork(current, unitOfWork, subtreeRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n    } else {\n        next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    }\n\n    resetCurrentDebugFiberInDEV();\n    unitOfWork.memoizedProps = unitOfWork.pendingProps;\n    if (next === null) { // 3. completeUnitOfWork \u662f\u56de\u6eaf\u9636\u6bb5completeUnitOfWork(unitOfWork);\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n    } else {\n        workInProgress = next;\n    }\n\n    ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n    // Attempt to complete the current unit of work, then move to the next\n    // sibling. If there are no more siblings, return to the parent fiber.\n    let completedWork = unitOfWork;\n    do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        const current = completedWork.alternate;\n        const returnFiber = completedWork.return;\n\n        // Check if the work completed or if something threw.\n        if ((completedWork.flags & Incomplete) === NoFlags) {\n            setCurrentDebugFiberInDEV(completedWork);\n            let next;   // 3.1 \u56de\u6eaf\u5e76\u5904\u7406\u8282\u70b9\n            if (\n                !enableProfilerTimer ||\n                (completedWork.mode & ProfileMode) === NoMode\n            ) {\n                next = completeWork(current, completedWork, subtreeRenderLanes);\n            } else {\n                startProfilerTimer(completedWork);\n                next = completeWork(current, completedWork, subtreeRenderLanes);\n                // Update render duration assuming we didn't error.\n                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n            }\n            resetCurrentDebugFiberInDEV();\n\n            if (next !== null) {       // \u5224\u65ad\u5728\u5904\u7406\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d, \u662f\u5426\u6d3e\u751f\u51fa\u65b0\u7684\u8282\u70b9\n                // Completing this fiber spawned new work. Work on that next.\n                workInProgress = next;\n                return;\n            }\n\n            resetChildLanes(completedWork);\n\n            if (\n                returnFiber !== null &&\n                // Do not append effects to parents if a sibling failed to complete\n                (returnFiber.flags & Incomplete) === NoFlags\n            ) {\n                // Append all the effects of the subtree and this fiber onto the effect\n                // list of the parent. The completion order of the children affects the\n                // side-effect order.\n                if (returnFiber.firstEffect === null) {\n                    returnFiber.firstEffect = completedWork.firstEffect;\n                }\n                if (completedWork.lastEffect !== null) {\n                    if (returnFiber.lastEffect !== null) {\n                        returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n                    }\n                    returnFiber.lastEffect = completedWork.lastEffect;\n                }\n\n                // If this fiber had side-effects, we append it AFTER the children's\n                // side-effects. We can perform certain side-effects earlier if needed,\n                // by doing multiple passes over the effect list. We don't want to\n                // schedule our own side-effect on our own list because if end up\n                // reusing children we'll schedule this effect onto itself since we're\n                // at the end.\n                const flags = completedWork.flags;\n\n                // Skip both NoWork and PerformedWork tags when creating the effect\n                // list. PerformedWork effect is read by React DevTools but shouldn't be\n                // committed.\n                if (flags > PerformedWork) {\n                    if (returnFiber.lastEffect !== null) {\n                        returnFiber.lastEffect.nextEffect = completedWork;\n                    } else {\n                        returnFiber.firstEffect = completedWork;\n                    }\n                    returnFiber.lastEffect = completedWork;\n                }\n            }\n        } else {\n            // This fiber did not complete because something threw. Pop values off\n            // the stack without entering the complete phase. If this is a boundary,\n            // capture values if possible.\n            const next = unwindWork(completedWork, subtreeRenderLanes);\n\n            // Because this fiber did not complete, don't reset its expiration time.\n\n            if (next !== null) {\n                // If completing this work spawned new work, do that next. We'll come\n                // back here again.\n                // Since we're restarting, remove anything that is not a host effect\n                // from the effect tag.\n                next.flags &= HostEffectMask;\n                workInProgress = next;\n                return;\n            }\n\n            if (\n                enableProfilerTimer &&\n                (completedWork.mode & ProfileMode) !== NoMode\n            ) {\n                // Record the render duration for the fiber that errored.\n                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n                // Include the time spent working on failed children before continuing.\n                let actualDuration = completedWork.actualDuration;\n                let child = completedWork.child;\n                while (child !== null) {\n                    actualDuration += child.actualDuration;\n                    child = child.sibling;\n                }\n                completedWork.actualDuration = actualDuration;\n            }\n\n            if (returnFiber !== null) {\n                // Mark the parent fiber as incomplete and clear its effect list.\n                returnFiber.firstEffect = returnFiber.lastEffect = null;\n                returnFiber.flags |= Incomplete;\n            }\n        }\n\n        const siblingFiber = completedWork.sibling;\n        // 3.2 \u5224\u65ad\u662f\u5426\u6709\u65c1\u652f\n        if (siblingFiber !== null) {\n            // If there is more work to do in this returnFiber, do that next.\n            workInProgress = siblingFiber;\n            return;\n        }\n        \n        // 3.3 \u6ca1\u6709\u65c1\u652f \u7ee7\u7eed\u56de\u6eaf\n        // Otherwise, return to the parent\n        completedWork = returnFiber;\n        // Update the next thing we're working on in case something throws.\n        workInProgress = completedWork;\n    } while (completedWork !== null);\n\n    // We've reached the root.\n    if (workInProgressRootExitStatus === RootIncomplete) {\n        workInProgressRootExitStatus = RootCompleted;\n    }\n}\n")),(0,o.kt)("p",null,"\u4ee5\u4e0a\u6e90\u7801\u672c\u8d28\u4e0a\u662f\u91c7\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u8fdb\u884c dfs, \u5047\u8bbe\u6709\u4ee5\u4e0b\u7ec4\u4ef6\u7ed3\u6784:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'class App extends React.Component {  \n    render() {\n        return (      \n            <div className="app"><header>header</header><Content /><footer>footer</footer>  </div>\n        );\n  }\n}\n\nclass Content extends React.Component {  \n    render() {\n        return (      \n            <React.Fragment><p>1</p><p>2</p><p>3</p>  </React.Fragment>\n        );\n  }\n}\nexport default App;\n')),(0,o.kt)("p",null,"\u6ce8\u610f:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'ReactElement\u6811\u662f\u5728\u5927\u5faa\u73af\u4e2d\u7684beginWork\u9636\u6bb5"\u9010\u7ea7"\u751f\u6210\u7684.'),(0,o.kt)("li",{parentName:"ul"},'"\u9010\u7ea7"\u4e2d\u7684\u6bcf\u4e00\u7ea7\u662f\u503c\u4e00\u4e2aclass\u6216function\u7c7b\u578b\u7684\u7ec4\u4ef6, \u6bcf\u8c03\u7528\u4e00\u6b21render\u6216\u6267\u884c\u4e00\u6b21function\u8c03\u7528, \u5c31\u4f1a\u751f\u6210\u4e00\u6279ReactElement\u8282\u70b9.'),(0,o.kt)("li",{parentName:"ul"},"ReactElement\u6811\u7684\u6784\u9020, \u5b9e\u9645\u4e0a\u5c31\u662f\u5404\u7ea7\u7ec4\u4ef6render\u4e4b\u540e\u7684\u603b\u548c.")),(0,o.kt)("h4",{id:"4-2fiber-\u6811\u7684\u6784\u9020"},"4-2.fiber \u6811\u7684\u6784\u9020"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u5728ReactElement\u7684\u6784\u9020\u8fc7\u7a0b\u4e2d, \u540c\u65f6\u4f34\u968f\u7740fiber\u6811\u7684\u6784\u9020, fiber\u6811\u540c\u6837\u4e5f\u662f\u5728beginWork\u9636\u6bb5\u751f\u6210\u7684.\n\n\u7ed8\u5236\u51fa\u904d\u5386\u8def\u5f84\u5982\u4e0b:\n")),(0,o.kt)("h4",{id:"4-3\u67e5\u627e-context-\u7684\u6d88\u8d39\u8282\u70b9"},"4-3.\u67e5\u627e context \u7684\u6d88\u8d39\u8282\u70b9"),(0,o.kt)("p",null,"\u5f53context\u6539\u53d8\u4e4b\u540e, \u9700\u8981\u627e\u51fa\u4f9d\u8d56\u8be5context\u7684\u6240\u6709\u5b50\u8282\u70b9(\u8be6\u7ec6\u5206\u6790\u4f1a\u5728context\u539f\u7406\u7ae0\u8282\u6df1\u5165\u89e3\u8bfb), \u8fd9\u91cc\u540c\u6837\u4e5f\u662f\u4e00\u4e2aDFS, \u5177\u4f53\u6e90\u7801\u5728 ReactFiberNewContext.js.\n\u5c06\u5176\u4e3b\u6746\u903b\u8f91\u5265\u79bb\u51fa\u6765, \u53ef\u4ee5\u6e05\u6670\u7684\u770b\u51fa\u91c7\u7528\u5faa\u73af\u9012\u5f52\u7684\u65b9\u5f0f\u8fdb\u884c\u904d\u5386:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// https://github.com/facebook/react/blob/v17.0.1/packages/react-reconciler/src/ReactFiberNewContext.old.js#L182-L295\n\nexport function propagateContextChange(\n    workInProgress: Fiber,\n    context: ReactContext<mixed>,\n    changedBits: number,\n    renderLanes: Lanes,\n): void {\n    let fiber = workInProgress.child;\n    if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n    }\n    while (fiber !== null) {\n        let nextFiber;\n\n        // Visit this fiber.\n        const list = fiber.dependencies;\n        \n        // \u5339\u914dcontext\u7b49\u903b\u8f91, \u548cdfs\u65e0\u5173, \u6b64\u5904\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565  // ...\n        if (list !== null) {\n            nextFiber = fiber.child;\n\n            let dependency = list.firstContext;\n            while (dependency !== null) {\n                // Check if the context matches.\n                if (\n                    dependency.context === context &&\n                    (dependency.observedBits & changedBits) !== 0\n                ) {\n                    // Match! Schedule an update on this fiber.\n\n                    if (fiber.tag === ClassComponent) {\n                        // Schedule a force update on the work-in-progress.\n                        const update = createUpdate(\n                            NoTimestamp,\n                            pickArbitraryLane(renderLanes),\n                        );\n                        update.tag = ForceUpdate;\n                        // TODO: Because we don't have a work-in-progress, this will add the\n                        // update to the current fiber, too, which means it will persist even if\n                        // this render is thrown away. Since it's a race condition, not sure it's\n                        // worth fixing.\n                        enqueueUpdate(fiber, update);\n                    }\n                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n                    const alternate = fiber.alternate;\n                    if (alternate !== null) {\n                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n                    }\n                    scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n                    // Mark the updated lanes on the list, too.\n                    list.lanes = mergeLanes(list.lanes, renderLanes);\n\n                    // Since we already found a match, we can stop traversing the\n                    // dependency list.\n                    break;\n                }\n                dependency = dependency.next;\n            }\n        } else if (fiber.tag === ContextProvider) {\n            // Don't scan deeper if this is a matching provider\n            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (\n            enableSuspenseServerRenderer &&\n            fiber.tag === DehydratedFragment\n        ) {\n            // If a dehydrated suspense boundary is in this subtree, we don't know\n            // if it will have any context consumers in it. The best we can do is\n            // mark it as having updates.\n            const parentSuspense = fiber.return;\n            invariant(\n                parentSuspense !== null,\n                'We just came from a parent so we must have had a parent. This is a bug in React.',\n            );\n            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n            const alternate = parentSuspense.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            // This is intentionally passing this fiber as the parent\n            // because we want to schedule this fiber as having work\n            // on its children. We'll use the childLanes on\n            // this fiber to indicate that a context has changed.\n            scheduleWorkOnParentPath(parentSuspense, renderLanes);\n            nextFiber = fiber.sibling;\n        } else {\n            // // \u5411\u4e0b\u63a2\u5bfb \n            // Traverse down.\n            nextFiber = fiber.child;\n        }\n\n        if (nextFiber !== null) {\n            // Set the return pointer of the child to the work-in-progress fiber.\n            nextFiber.return = fiber;\n        } else {\n            // No child. Traverse to next sibling.\n            nextFiber = fiber;\n            while (nextFiber !== null) {\n                if (nextFiber === workInProgress) {\n                    // We're back to the root of this subtree. Exit.\n                    nextFiber = null;\n                    break;\n                }\n                const sibling = nextFiber.sibling;\n                if (sibling !== null) {\n                    // Set the return pointer of the sibling to the work-in-progress fiber.\n                    sibling.return = nextFiber.return;\n                    nextFiber = sibling;\n                    break;\n                }\n                // No more siblings. Traverse up.\n                nextFiber = nextFiber.return;\n            }\n        }\n        fiber = nextFiber;\n    }\n}\n")),(0,o.kt)("h4",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,o.kt)("p",null,"\u7531\u4e8ereact\u5185\u90e8\u4f7f\u7528\u4e86ReactElement\u548cfiber\u4e24\u5927\u6811\u5f62\u7ed3\u6784, \u6240\u4ee5\u6709\u4e0d\u5c11\u5173\u4e8e\u8282\u70b9\u8bbf\u95ee\u7684\u903b\u8f91."),(0,o.kt)("p",null,"\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86DFS\u7684\u6982\u5ff5\u548c\u5b83\u5728react\u6e90\u7801\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5. \u5176\u4e2dfiber\u6811\u7684DFS\u904d\u5386, \u6d89\u53ca\u5230\u7684\u4ee3\u7801\u591a, \u5206\u5e03\u5e7f, \u6db5\u76d6\u4e86reconciler\u9636\u6bb5\u7684\u5927\u90e8\u5206\u5de5\u4f5c, \u662freconciler\u9636\u6bb5\u5de5\u4f5c\u5faa\u73af\u7684\u6838\u5fc3\u6d41\u7a0b."),(0,o.kt)("p",null,"\u9664\u4e86DFS\u4e4b\u5916, \u6e90\u7801\u4e2d\u8fd8\u6709\u5f88\u591a\u903b\u8f91\u90fd\u662f\u67e5\u627e\u6811\u4e2d\u7684\u8282\u70b9(\u5982: \u5411\u4e0a\u67e5\u627e\u7236\u8282\u70b9\u7b49). \u5bf9\u6811\u5f62\u7ed3\u6784\u7684\u904d\u5386\u5728\u6e90\u7801\u4e2d\u7684\u6bd4\u4f8b\u5f88\u9ad8, \u4e86\u89e3\u8fd9\u4e9b\u7b97\u6cd5\u6280\u5de7\u80fd\u591f\u66f4\u597d\u7684\u7406\u89e3react\u6e90\u7801."))}d.isMDXComponent=!0}}]);