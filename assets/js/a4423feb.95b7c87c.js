"use strict";(self.webpackChunkprogramming_technology=self.webpackChunkprogramming_technology||[]).push([[9027],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),a=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=a(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",$={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=a(t),d=o,y=u["".concat(l,".").concat(d)]||u[d]||$[d]||c;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,s=new Array(c);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var a=2;a<c;a++)s[a]=t[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70425:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>$,frontMatter:()=>c,metadata:()=>i,toc:()=>a});var r=t(87462),o=(t(67294),t(3905));const c={},s=void 0,i={unversionedId:"backend/mysql/\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801",id:"backend/mysql/\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801",title:"\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801",description:"* \u6b65\u9aa41\uff1a\u70b9\u51fbnavicat \u6587\u4ef6\u9009\u9879\uff0c\u5bfc\u51fa\u8fde\u63a5\uff0c\u52fe\u9009\u9700\u8981\u5bfc\u51fa\u7684\u6570\u636e\u5e93\uff0c\u5bfc\u51fa\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u52fe\u9009\u5bfc\u51fa\u5bc6\u7801",source:"@site/programming-tech/backend/10-mysql/02-\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801.md",sourceDirName:"backend/10-mysql",slug:"/backend/mysql/\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801",permalink:"/backend/mysql/\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801",draft:!1,editUrl:"https://github.com/huiruo/programming-tech-website/programming-tech/backend/10-mysql/02-\u67e5\u770b\u5df2\u767b\u5f55\u5bc6\u7801.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"golang\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684http\u670d\u52a1",permalink:"/backend/golang/golang\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684http\u670d\u52a1"},next:{title:"\u884c\u683c\u5f0f-",permalink:"/backend/mysql/\u884c\u683c\u5f0f-"}},l={},a=[],p={toc:a},u="wrapper";function $(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6b65\u9aa41\uff1a\u70b9\u51fbnavicat \u6587\u4ef6\u9009\u9879\uff0c\u5bfc\u51fa\u8fde\u63a5\uff0c\u52fe\u9009\u9700\u8981\u5bfc\u51fa\u7684\u6570\u636e\u5e93\uff0c\u5bfc\u51fa\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u52fe\u9009\u5bfc\u51fa\u5bc6\u7801\n\u5bfc\u51fa\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2aconnections.ncx\u6587\u4ef6\u4e2d\u627e\u5230password\uff0c\u7136\u540e\u590d\u5236\u51fa\u6765")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6b65\u9aa42\uff1a\u5c06\u8fd9\u6bb5\u4ee3\u7801\u590d\u5236\u5230: ",(0,o.kt)("a",{parentName:"p",href:"https://tool.lu/coderunner?login=from_csdn"},"https://tool.lu/coderunner?login=from_csdn")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nclass NavicatPassword\n{\n    protected $version = 0;\n    protected $aesKey = 'libcckeylibcckey';\n    protected $aesIv = 'libcciv libcciv ';\n    protected $blowString = '3DC5CA39';\n    protected $blowKey = null;\n    protected $blowIv = null;\n     \n    public function __construct($version = 12)\n    {\n        $this->version = $version;\n        $this->blowKey = sha1('3DC5CA39', true);\n        $this->blowIv = hex2bin('d9c7c3c8870d64bd');\n    }\n     \n    public function encrypt($string)\n    {\n        $result = FALSE;\n        switch ($this->version) {\n            case 11:\n                $result = $this->encryptEleven($string);\n                break;\n            case 12:\n                $result = $this->encryptTwelve($string);\n                break;\n            default:\n                break;\n        }\n         \n        return $result;\n    }\n     \n    protected function encryptEleven($string)\n    {\n        $round = intval(floor(strlen($string) / 8));\n        $leftLength = strlen($string) % 8;\n        $result = '';\n        $currentVector = $this->blowIv;\n         \n        for ($i = 0; $i < $round; $i++) {\n            $temp = $this->encryptBlock($this->xorBytes(substr($string, 8 * $i, 8), $currentVector));\n            $currentVector = $this->xorBytes($currentVector, $temp);\n            $result .= $temp;\n        }\n         \n        if ($leftLength) {\n            $currentVector = $this->encryptBlock($currentVector);\n            $result .= $this->xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);\n        }\n         \n        return strtoupper(bin2hex($result));\n    }\n     \n    protected function encryptBlock($block)\n    {\n        return openssl_encrypt($block, 'BF-ECB', $this->blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);\n    }\n     \n    protected function decryptBlock($block)\n    {\n        return openssl_decrypt($block, 'BF-ECB', $this->blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);\n    }\n     \n    protected function xorBytes($str1, $str2)\n    {\n        $result = '';\n        for ($i = 0; $i < strlen($str1); $i++) {\n            $result .= chr(ord($str1[$i]) ^ ord($str2[$i]));\n        }\n         \n        return $result;\n    }\n     \n    protected function encryptTwelve($string)\n    {\n        $result = openssl_encrypt($string, 'AES-128-CBC', $this->aesKey, OPENSSL_RAW_DATA, $this->aesIv);\n        return strtoupper(bin2hex($result));\n    }\n     \n    public function decrypt($string)\n    {\n        $result = FALSE;\n        switch ($this->version) {\n            case 11:\n                $result = $this->decryptEleven($string);\n                break;\n            case 12:\n                $result = $this->decryptTwelve($string);\n                break;\n            default:\n                break;\n        }\n         \n        return $result;\n    }\n     \n    protected function decryptEleven($upperString)\n    {\n        $string = hex2bin(strtolower($upperString));\n         \n        $round = intval(floor(strlen($string) / 8));\n        $leftLength = strlen($string) % 8;\n        $result = '';\n        $currentVector = $this->blowIv;\n         \n        for ($i = 0; $i < $round; $i++) {\n            $encryptedBlock = substr($string, 8 * $i, 8);\n            $temp = $this->xorBytes($this->decryptBlock($encryptedBlock), $currentVector);\n            $currentVector = $this->xorBytes($currentVector, $encryptedBlock);\n            $result .= $temp;\n        }\n         \n        if ($leftLength) {\n            $currentVector = $this->encryptBlock($currentVector);\n            $result .= $this->xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);\n        }\n         \n        return $result;\n    }\n     \n    protected function decryptTwelve($upperString)\n    {\n        $string = hex2bin(strtolower($upperString));\n        return openssl_decrypt($string, 'AES-128-CBC', $this->aesKey, OPENSSL_RAW_DATA, $this->aesIv);\n    }\n};\n \n \n//\u9700\u8981\u6307\u5b9a\u7248\u672c\u4e24\u79cd\uff0c11\u621612\n//$navicatPassword = new NavicatPassword(11);\n//\u8fd9\u91cc\u6211\u6307\u5b9a\u768412\u7684\u7248\u672c\uff0c\u539f\u5148\u6307\u5b9a\u768411\uff0c\u6267\u884c\u4e4b\u540e\u7684\u5bc6\u7801\u662f\u4e71\u7801\n$navicatPassword = new NavicatPassword(12);\n \n//\u89e3\u5bc6\n$decode = $navicatPassword->decrypt('AE137BXX98AB3AD0F913EBEF2E8D3C52E9');\necho $decode.\"\\n\";\n?>\n")))}$.isMDXComponent=!0}}]);