"use strict";(self.webpackChunkprogramming_technology=self.webpackChunkprogramming_technology||[]).push([[6784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,y=p["".concat(c,".").concat(h)]||p[h]||m[h]||i;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"structure-algorithm/\u6808-\u80cc\u5305/\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3",id:"structure-algorithm/\u6808-\u80cc\u5305/\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3",title:"\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3",description:"\u96c6\u5408\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0 iterator() \u5e76\u8fd4\u56de\u4e00\u4e2a Iterator \u5bf9\u8c61",source:"@site/programming-tech/structure-algorithm/02-\u6808-\u80cc\u5305/02-\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3.md",sourceDirName:"structure-algorithm/02-\u6808-\u80cc\u5305",slug:"/structure-algorithm/\u6808-\u80cc\u5305/\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3",permalink:"/structure-algorithm/\u6808-\u80cc\u5305/\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3",draft:!1,editUrl:"https://github.com/huiruo/programming-tech-website/programming-tech/structure-algorithm/02-\u6808-\u80cc\u5305/02-\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u96c6\u5408\u7684\u8fed\u4ee3.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"structureAlgorithm",previous:{title:"\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u5b9a\u5bb9\u6808",permalink:"/structure-algorithm/\u6808-\u80cc\u5305/\u96c6\u5408\u7c7b\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0-\u5b9a\u5bb9\u6808"},next:{title:"\u94fe\u5f0f\u6570\u636e\u7ed3\u6784\u5f88\u91cd\u8981-\u5b9e\u73b0\u80cc\u5305-\u961f\u5217-\u6808",permalink:"/structure-algorithm/\u6808-\u80cc\u5305/\u94fe\u5f0f\u6570\u636e\u7ed3\u6784\u5f88\u91cd\u8981-\u5b9e\u73b0\u80cc\u5305-\u961f\u5217-\u6808"}},c={},l=[{value:"\u96c6\u5408\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0 iterator() \u5e76\u8fd4\u56de\u4e00\u4e2a Iterator \u5bf9\u8c61",id:"\u96c6\u5408\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0-iterator-\u5e76\u8fd4\u56de\u4e00\u4e2a-iterator-\u5bf9\u8c61",level:2},{value:"\u6211\u4eec\u9700\u8981\u9006\u5e8f\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5c06\u8fed\u4ee3\u5668\u547d\u540d\u4e3a ReverseArrayIterator",id:"\u6211\u4eec\u9700\u8981\u9006\u5e8f\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\u5c06\u8fed\u4ee3\u5668\u547d\u540d\u4e3a-reversearrayiterator",level:2},{value:"\u5b9e\u4f8b\u89c1\uff1aA2ResizingArrayStack",id:"\u5b9e\u4f8b\u89c1a2resizingarraystack",level:2},{value:"\u4ee5\u4e0a\u5b9e\u73b0\u7f3a\u70b9",id:"\u4ee5\u4e0a\u5b9e\u73b0\u7f3a\u70b9",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u96c6\u5408\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0-iterator-\u5e76\u8fd4\u56de\u4e00\u4e2a-iterator-\u5bf9\u8c61"},"\u96c6\u5408\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0 iterator() \u5e76\u8fd4\u56de\u4e00\u4e2a Iterator \u5bf9\u8c61"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Iterator \u7c7b\u5fc5\u987b\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a\nhasNext()\nnext(): \u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u6cdb\u578b\u5143\u7d20\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u5bf9\u4e8e\u53ef\u8fed\u4ee3\u7c7b\u578b\uff0cjava \u5b9a\u4e49\u4e86\u6240\u9700\u63a5\u53e3\uff1a\n\npublic interface Iterable<Item>{\n    Iterator<Item> iterator();\n}\n\u8fd9\u91cc\u8fed\u4ee3\u5668\u90fd\u662f\u6cdb\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u7c7b\u578bItem \u6765\u90a6\u65cf\u7528\u4f8b\u4fbf\u5229\u5b83\u4eec\u6307\u5b9a\u7684\u4efb\u610f\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n")),(0,a.kt)("h2",{id:"\u6211\u4eec\u9700\u8981\u9006\u5e8f\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\u5c06\u8fed\u4ee3\u5668\u547d\u540d\u4e3a-reversearrayiterator"},"\u6211\u4eec\u9700\u8981\u9006\u5e8f\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5c06\u8fed\u4ee3\u5668\u547d\u540d\u4e3a ReverseArrayIterator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public Iterator<Item> iterator(){\n    return new ReverseArrayIterator();\n}\n\n\n\u8fed\u4ee3\u5668\u63a5\u53e3\uff1a\u5b9e\u73b0 hasNext(),next()\u7684\u7c7b\u5bf9\u8c61\uff1a\npublic interface Iterator<Item>{\n    boolean hasNext();\n    Item next();\n    vodid remove();\n}\n\n\n\u518d\u8fdb\u4e00\u6b65\uff1a\n\nprivate class ReverseArrayIterator implements Iterator<Item>{\n    private int i = N;\n    public boolean hasNext(){\n        return i > 0;\n    }\n    public Item next(){\n        return a[--i];\n    }\n    public void remove(){\n    }\n}\n\u8bf7\u6ce8\u610f\uff0c\u5d4c\u5957\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u5305\u542b\u5b83\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u8fd9\u91cc\u662f a[] \u548c N;\n\n\n")),(0,a.kt)("h2",{id:"\u5b9e\u4f8b\u89c1a2resizingarraystack"},"\u5b9e\u4f8b\u89c1\uff1aA2ResizingArrayStack"),(0,a.kt)("h2",{id:"\u4ee5\u4e0a\u5b9e\u73b0\u7f3a\u70b9"},"\u4ee5\u4e0a\u5b9e\u73b0\u7f3a\u70b9"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u7f3a\u70b9\u5728\u4e8e\u67d0\u4e9bpush() \u548c pop() \u4f1a\u8c03\u6574\u6570\u7ec4\u7684\u5927\u5c0f\uff1a\u8fd9\u4e2a\u64cd\u4f5c\u7684\u8017\u65f6\u548c\u6808\u5927\u5c0f\u6210\u6b63\u6bd4\u3002\n\n\u5b9e\u73b0\u80fd\u591f\u52a8\u6001\u8c03\u6574\u6570\u7ec4\u5927\u5c0f\u7684\u4e0b\u538b\u6808\uff1a\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class A2ResizingArrayStack<Item> implements Iterable<Item> {\n\n    // initial capacity of underlying resizing array\n    private static final int INIT_CAPACITY = 8;\n\n    private Item[] a;         // array of items\n    private int n;            // number of elements on stack\n\n\n    /**\n     * Initializes an empty stack.\n     */\n    public A2ResizingArrayStack() {\n                // \u6808\u5143\u7d20\n        a = (Item[]) new Object[INIT_CAPACITY];\n                // \u5143\u7d20\u6570\u91cf\n        n = 0;\n    }\n\n    /**\n     * Is this stack empty?\n     * @return true if this stack is empty; false otherwise\n     */\n    public boolean isEmpty() {\n        return n == 0;\n    }\n\n    /**\n     * Returns the number of items in the stack.\n     * @return the number of items in the stack\n     */\n    public int size() {\n        return n;\n    }\n\n\n    // resize the underlying array holding the elements\n        // \u5c06\u6808\u79fb\u52a8\u5230\u4e00\u4e2a\u5927\u5c0f\u4e3a max \u7684\u65b0\u6570\u7ec4\n    private void resize(int capacity) {\n        assert capacity >= n;\n\n        // textbook implementation\n        Item[] copy = (Item[]) new Object[capacity];\n        for (int i = 0; i < n; i++) {\n            copy[i] = a[i];\n        }\n        a = copy;\n\n        // alternative implementation\n        // a = java.util.Arrays.copyOf(a, capacity);\n    }\n\n\n    /**\n     * Adds the item to this stack.\n     * @param item the item to add\n     */\n         // \u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u6808\u9876\n    public void push(Item item) {\n        if (n == a.length) resize(2*a.length);    // double size of array if necessary\n        a[n++] = item;                            // add item\n    }\n\n    /**\n     * Removes and returns the item most recently added to this stack.\n     * @return the item most recently added\n     * @throws java.util.NoSuchElementException if this stack is empty\n     */\n         // \u4ece\u9876\u6808\u5220\u9664\u5143\u7d20\n    public Item pop() {\n        if (isEmpty()) throw new NoSuchElementException("Stack underflow");\n        Item item = a[n-1];\n                // \u907f\u514d\u5bf9\u8c61\u6e38\u79bb\n        a[n-1] = null;                              // to avoid loitering\n        n--;\n        // shrink size of array if necessary\n        if (n > 0 && n == a.length/4) resize(a.length/2);\n        return item;\n    }\n\n\n    /**\n     * Returns (but does not remove) the item most recently added to this stack.\n     * @return the item most recently added to this stack\n     * @throws java.util.NoSuchElementException if this stack is empty\n     */\n    public Item peek() {\n        if (isEmpty()) throw new NoSuchElementException("Stack underflow");\n        return a[n-1];\n    }\n\n    /**\n     * Returns an iterator to this stack that iterates through the items in LIFO order.\n     * @return an iterator to this stack that iterates through the items in LIFO order.\n     */\n    public Iterator<Item> iterator() {\n        return new ReverseArrayIterator();\n    }\n\n    // an iterator, doesn\'t implement remove() since it\'s optional\n        // \u652f\u6301\u540e\u8fdb\u5148\u51fa\u7684\u8fed\u4ee3\n    private class ReverseArrayIterator implements Iterator<Item> {\n        private int i;\n\n        public ReverseArrayIterator() {\n            i = n-1;\n        }\n\n        public boolean hasNext() {\n            return i >= 0;\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n        public Item next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            return a[i--];\n        }\n    }\n}\n')))}m.isMDXComponent=!0}}]);