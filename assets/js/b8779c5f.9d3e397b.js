"use strict";(self.webpackChunkprogramming_technology=self.webpackChunkprogramming_technology||[]).push([[698],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>m});var o=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=o.createContext({}),c=function(e){var n=o.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),g=t,m=u["".concat(i,".").concat(g)]||u[g]||p[g]||s;return r?o.createElement(m,a(a({ref:n},d),{},{components:r})):o.createElement(m,a({ref:n},d))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,a=new Array(s);a[0]=g;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:t,a[1]=l;for(var c=2;c<s;c++)a[c]=r[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}g.displayName="MDXCreateElement"},28712:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=r(87462),t=(r(67294),r(3905));const s={},a=void 0,l={unversionedId:"React/workInProgress\u6784\u5efa",id:"React/workInProgress\u6784\u5efa",title:"workInProgress\u6784\u5efa",description:"workInProgress \u6784\u5efa",source:"@site/programming-tech/React/workInProgress\u6784\u5efa.md",sourceDirName:"React",slug:"/React/workInProgress\u6784\u5efa",permalink:"/React/workInProgress\u6784\u5efa",draft:!1,editUrl:"https://github.com/huiruo/programming-tech-website/programming-tech/React/workInProgress\u6784\u5efa.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"commit\u9636\u6bb5-useLayoutEffect-useEffect",permalink:"/React/commit\u9636\u6bb5-useLayoutEffect-useEffect"},next:{title:"mockData-babel\u8fd4\u56de",permalink:"/React/mockData-babel\u8fd4\u56de"}},i={},c=[{value:"workInProgress \u6784\u5efa",id:"workinprogress-\u6784\u5efa",level:2},{value:"workInProgress \u6784\u5efa2\uff1abeginWork \u7b2c\u4e00\u6b21\u4f1a\u8c03\u7528updateHostRoot\u8fdb\u884c\u521d\u59cb\u5316:updateHostRoot",id:"workinprogress-\u6784\u5efa2beginwork-\u7b2c\u4e00\u6b21\u4f1a\u8c03\u7528updatehostroot\u8fdb\u884c\u521d\u59cb\u5316updatehostroot",level:3},{value:"\u91cd\u70b9\u6784\u5efa\u5b50\u8282\u70b9\uff1a",id:"\u91cd\u70b9\u6784\u5efa\u5b50\u8282\u70b9",level:3},{value:"beginWork\u7b2c\u4e8c\u6b21\u4e4bcase IndeterminateComponent",id:"beginwork\u7b2c\u4e8c\u6b21\u4e4bcase-indeterminatecomponent",level:2},{value:"\u91cd\u70b9\uff1acode\u51fd\u6570\u521d\u59cb\u5316\u5728renderWithHooks\u8fd9\u91cc\u6267\u884c",id:"\u91cd\u70b9code\u51fd\u6570\u521d\u59cb\u5316\u5728renderwithhooks\u8fd9\u91cc\u6267\u884c",level:3},{value:"ChildReconciler",id:"childreconciler",level:3},{value:"\u7b2c\u4e09\u6b21 beginWork",id:"\u7b2c\u4e09\u6b21-beginwork",level:2}],d={toc:c},u="wrapper";function p(e){let{components:n,...r}=e;return(0,t.kt)(u,(0,o.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"workinprogress-\u6784\u5efa"},"workInProgress \u6784\u5efa"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"  function createWorkInProgress(current, pendingProps) {\n    var workInProgress = current.alternate;\n    // \u533a\u5206\u662f\u5728mount\u65f6\u8fd8\u662f\u5728update\u65f6\n    if (workInProgress === null) {\n      // We use a double buffering pooling technique because we know that we'll\n      // only ever need at most two versions of a tree. We pool the \"other\" unused\n      // node that we're free to reuse. This is lazily created to avoid allocating\n      // extra objects for things that are never updated. It also allow us to\n      // reclaim the extra memory if needed.\n      console.log('==createWorkInProgress--\x3e,\u6ca1\u6709\u5c31\u521b\u5efa\u4e00\u4e2a')\n      workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n      console.log('==createWorkInProgress--\x3e,\u6ca1\u6709\u5c31\u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u503c', workInProgress)\n      debugger\n      workInProgress.elementType = current.elementType;\n      workInProgress.type = current.type;\n      workInProgress.stateNode = current.stateNode;\n\n      {\n        // DEV-only fields\n        workInProgress._debugSource = current._debugSource;\n        workInProgress._debugOwner = current._debugOwner;\n        workInProgress._debugHookTypes = current._debugHookTypes;\n      }\n      console.log('==createWorkInProgress--\x3e,workInProgress.alternate\u6307\u5b9a\u4e3acurrent')\n      workInProgress.alternate = current;\n      current.alternate = workInProgress;\n    } else {\n      // \u590d\u7528\u5c5e\u6027\n      workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n      workInProgress.type = current.type; // We already have an alternate.\n      // Reset the effect tag.\n\n      workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n      workInProgress.subtreeFlags = NoFlags;\n      workInProgress.deletions = null;\n\n      {\n        // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n        // This prevents time from endlessly accumulating in new commits.\n        // This has the downside of resetting values for different priority renders,\n        // But works for yielding (the common case) and should support resuming.\n        workInProgress.actualDuration = 0;\n        workInProgress.actualStartTime = -1;\n      }\n    } // Reset all effects except static ones.\n    // Static effects are not specific to a render.\n\n\n    workInProgress.flags = current.flags & StaticMask;\n    // \u590d\u7528\u5c5e\u6027\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    }; // These will be overridden during the parent's reconciliation\n\n    workInProgress.sibling = current.sibling;\n    workInProgress.index = current.index;\n    workInProgress.ref = current.ref;\n\n    {\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n\n    {\n      workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case FunctionComponent:\n        case SimpleMemoComponent:\n          workInProgress.type = resolveFunctionForHotReloading(current.type);\n          break;\n\n        case ClassComponent:\n          workInProgress.type = resolveClassForHotReloading(current.type);\n          break;\n\n        case ForwardRef:\n          workInProgress.type = resolveForwardRefForHotReloading(current.type);\n          break;\n      }\n    }\n\n    return workInProgress;\n  }\n")),(0,t.kt)("p",null,"\u8d4b\u503c\uff1a\u8c03\u7528 prepareFreshStack"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"  function renderRootSync(root, lanes) {\n\n    var prevExecutionContext = executionContext;\n    executionContext |= RenderContext;\n    var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n    // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n\n          if (memoizedUpdaters.size > 0) {\n            restorePendingUpdaters(root, workInProgressRootRenderLanes);\n            memoizedUpdaters.clear();\n          } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n          // If we bailout on this work, we'll move them back (like above).\n          // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n          // That way we can keep the current update and future updates separate.\n\n\n          movePendingFibersToMemoized(root, lanes);\n        }\n\n      }\n\n      workInProgressTransitions = getTransitionsForLanes();\n\n      console.log('workInProgress', workInProgress, root)\n      debugger\n      console.log('render\u8c03\u7528 prepareFreshStack\u524d',workInProgress)\n      prepareFreshStack(root, lanes);\n      console.log('workInProgress', workInProgress, root)\n      console.log('render\u8c03\u7528 prepareFreshStack\u540e',workInProgress)\n    }\n")),(0,t.kt)("h3",{id:"workinprogress-\u6784\u5efa2beginwork-\u7b2c\u4e00\u6b21\u4f1a\u8c03\u7528updatehostroot\u8fdb\u884c\u521d\u59cb\u5316updatehostroot"},"workInProgress \u6784\u5efa2\uff1abeginWork \u7b2c\u4e00\u6b21\u4f1a\u8c03\u7528updateHostRoot\u8fdb\u884c\u521d\u59cb\u5316:updateHostRoot"),(0,t.kt)("p",null,"\u7b2c\u4e8c\u6b21\u624d\u8d70 mountIndeterminateComponent \u6267\u884ccode()\u51fd\u6570,\u6b64\u65f6\u7684workInProgress.type \u624d\u6709\u503c"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"  function beginWork(current, workInProgress, renderLanes) {\n    console.log('workInProgress', workInProgress, root)\n    debugger\n    workInProgress.lanes = NoLanes;\n    console.log('%c=beginWork()===start1-\u521d\u59cb\u5316', 'color:magenta', { getFiberName: getFiberName(workInProgress), current, renderLanes, workInProgress })\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n        {\n          console.log('%c=beginWork()==end 2 mountIndeterminateComponent', 'color:magenta', workInProgress)\n          console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=\u8c03\u7528mountIndeterminateComponent`, 'color:blueviolet', workInProgress.type)\n          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n      case HostRoot:\n        console.log('%c=beginWork()=end 6\u7b2c\u4e00\u6b21\u4f1a\u8d70\u8fd9\u91cc\u521d\u59cb\u5316workInProgress', 'color:magenta')\n        console.log('%c=beginWork()=end 6 updateHostRoot', 'color:magenta')\n        return updateHostRoot(current, workInProgress, renderLanes);\n    }\n  }\n")),(0,t.kt)("h3",{id:"\u91cd\u70b9\u6784\u5efa\u5b50\u8282\u70b9"},"\u91cd\u70b9\u6784\u5efa\u5b50\u8282\u70b9\uff1a"),(0,t.kt)("p",null,"reconcileChildren(current, workInProgress, nextChildren, renderLanes)--\x3ereconcileChildren"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  if (prevState.isDehydrated) {\n  } else {\n      // Root is not dehydrated. Either this is a client-only root, or it\n      // already hydrated.\n      resetHydrationState();\n\n      if (nextChildren === prevChildren) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      console.log('=reconcileChildren 9')\n      debugger\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      console.log('%c=updateHostRoot:\u6784\u5efa\u4e4b\u540eworkInProgress.child', 'color:black', { child })\n  }\n  console.log('%c=updateHostRoot:\u6700\u540e\u8fd4\u56deworkInProgress.child', 'color:black', workInProgress.child)\n\n  return workInProgress.child;\n}\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    console.log('%c=reconcileChildren mount', 'blueviolet');\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n    console.log('%c=reconcileChildren mount \u8fd4\u56de\u503cworkInProgress.child', 'blueviolet', workInProgress.child);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    console.log('%c=reconcileChildren update', 'yellow');\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n")),(0,t.kt)("p",null,"\u5f88\u957f\u7684\u51fd\u6570: reconcileChildren->reconcileChildFibers"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"  function ChildReconciler(shouldTrackSideEffects) {\n    // \u7701\u7565\n    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n      // This function is not recursive.\n      // If the top level item is an array, we treat it as a set of children,\n      // not as a fragment. Nested arrays on the other hand will be treated as\n      // fragment nodes. Recursion happens at the normal flow.\n      // Handle top level unkeyed fragments as if they were arrays.\n      // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n      // We treat the ambiguous cases above the same.\n      var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n      console.log('%c=reconcileChildFibers A', 'blueviolet');\n\n      if (isUnkeyedTopLevelFragment) {\n        newChild = newChild.props.children;\n      } // Handle object types\n\n\n      if (typeof newChild === 'object' && newChild !== null) {\n        switch (newChild.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n          case REACT_PORTAL_TYPE:\n            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n          case REACT_LAZY_TYPE:\n            var payload = newChild._payload;\n            var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n            return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n        }\n\n        if (isArray(newChild)) {\n          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n        }\n\n        if (getIteratorFn(newChild)) {\n          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n        }\n\n        throwOnInvalidObjectType(returnFiber, newChild);\n      }\n\n      if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n      }\n\n      {\n        if (typeof newChild === 'function') {\n          warnOnFunctionType(returnFiber);\n        }\n      } // Remaining cases are all treated as empty.\n\n\n      return deleteRemainingChildren(returnFiber, currentFirstChild);\n    }\n\n    return reconcileChildFibers;\n  }\n")),(0,t.kt)("h2",{id:"beginwork\u7b2c\u4e8c\u6b21\u4e4bcase-indeterminatecomponent"},"beginWork\u7b2c\u4e8c\u6b21\u4e4bcase IndeterminateComponent"),(0,t.kt)("p",null,"\u7b2c\u4e8c\u6b21beginWork\u8fdb\u5165case IndeterminateComponent \u6267\u884c mountIndeterminateComponent(),\u53ef\u89c1\u6df1\u5ea6\u904d\u5386\u4ece\u7236\u7ea7\u7ec4\u4ef6\u5f00\u59cb"),(0,t.kt)("p",null,"\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136 App \u662f\u4e00\u4e2a FunctionComponent\uff0c\u4f46\u662f\u5728 first paint \u7684\u65f6\u5019\uff0cReact \u5224\u65ad\u5176\u4e3a IndeterminateComponent"),(0,t.kt)("p",null,"\u5bf9\u4e8e FunctionComponent\uff0c\u5728\u7b2c\u4e00\u6b21\u8bc6\u522b\u7684\u65f6\u5019\u4f1a\u88ab\u8ba4\u4e3a\u662f IndeterminateComponent"),(0,t.kt)("p",null,"\u4e00\u4e2a\u51fd\u6570\uff0c\u53ea\u8981\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\u4e14\u5bf9\u8c61\u4e2d\u6709 render \u65b9\u6cd5\uff0c\u5c31\u8ba4\u4e3a\u662f ClassComponent\uff0c\u5426\u5219\u5c31\u662f FunctionComponent"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n        {\n          console.log('%c=beginWork()==end 2 mountIndeterminateComponent', 'color:magenta')\n          console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=\u8c03\u7528mountIndeterminateComponent`, 'color:blueviolet')\n          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n        }\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function beginWork(current, workInProgress, renderLanes) {\n    workInProgress.lanes = NoLanes;\n    console.log('%c=beginWork()===start1-\u521d\u59cb\u5316', 'color:magenta', { getFiberName: getFiberName(workInProgress), current, renderLanes, workInProgress })\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n        {\n          console.log('%c=beginWork()==end 2 mountIndeterminateComponent', 'color:magenta')\n          console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=\u8c03\u7528mountIndeterminateComponent`, 'color:blueviolet')\n          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n        }\n\n      case LazyComponent:\n        {\n          var elementType = workInProgress.elementType;\n          console.log('%c=beginWork()=end 3 mountLazyComponent', 'color:magenta')\n          return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n        }\n\n      case FunctionComponent:\n        {\n          var Component = workInProgress.type;\n          var unresolvedProps = workInProgress.pendingProps;\n          var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n          console.log('%c=beginWork()=end 4\u53ea\u6709\u66f4\u65b0\u624d\u4f1a\u8c03\u7528updateFunctionComponent', 'color:magenta')\n          return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n        }\n\n      case ClassComponent:\n        {\n          var _Component = workInProgress.type;\n          var _unresolvedProps = workInProgress.pendingProps;\n\n          var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n          console.log('%c=beginWork()=end 5 updateClassComponent', 'color:magenta')\n          return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n        }\n\n      case HostRoot:\n        console.log('%c=beginWork()=end 6 updateHostRoot', 'color:magenta')\n        return updateHostRoot(current, workInProgress, renderLanes);\n\n      case HostComponent:\n        console.log(`%c=beginWork()=end 7 updateHostComponent$1,\u5373\u539f\u751f DOM \u7ec4\u4ef6\u5bf9\u5e94\u7684 Fiber\u8282\u70b9:`, 'color:magenta', { type: workInProgress.type })\n        return updateHostComponent$1(current, workInProgress, renderLanes);\n\n      case HostText:\n        console.log('%c=beginWork()=end 8 updateHostText$1', 'color:magenta')\n        return updateHostText$1(current, workInProgress);\n\n      case SuspenseComponent:\n        console.log('%c=beginWork()=end 9 updateSuspenseComponent', 'color:magenta')\n        return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n      case HostPortal:\n        console.log('%c=beginWork()=end 10 updatePortalComponent', 'color:magenta')\n        return updatePortalComponent(current, workInProgress, renderLanes);\n\n      case ForwardRef:\n        {\n          var type = workInProgress.type;\n          var _unresolvedProps2 = workInProgress.pendingProps;\n\n          var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n          console.log('%c=beginWork()=end 11 updateForwardRef', 'color:magenta')\n          return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n        }\n\n      case Fragment:\n        console.log('%c=beginWork()=end 12 updateFragment', 'color:magenta')\n        return updateFragment(current, workInProgress, renderLanes);\n\n      case Mode:\n        console.log('%c=beginWork()=end 13 updateMode', 'color:magenta')\n        return updateMode(current, workInProgress, renderLanes);\n\n      case Profiler:\n        console.log('%c=beginWork()=end 14 updateProfiler', 'color:magenta')\n        return updateProfiler(current, workInProgress, renderLanes);\n\n      case ContextProvider:\n        console.log('%c=beginWork()=end 15 updateContextProvider', 'color:magenta')\n        return updateContextProvider(current, workInProgress, renderLanes);\n\n      case ContextConsumer:\n        console.log('%c=beginWork()=end 16 updateContextConsumer', 'color:magenta')\n        return updateContextConsumer(current, workInProgress, renderLanes);\n\n      case MemoComponent:\n        {\n          var _type2 = workInProgress.type;\n          var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n          {\n            if (workInProgress.type !== workInProgress.elementType) {\n              var outerPropTypes = _type2.propTypes;\n\n              if (outerPropTypes) {\n                checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n                  'prop', getComponentNameFromType(_type2));\n              }\n            }\n          }\n\n          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n          console.log('%c=beginWork()=end 17 updateMemoComponent', 'color:magenta')\n          return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n        }\n\n      case SimpleMemoComponent:\n        {\n          console.log('%c=beginWork()=end 18 updateSimpleMemoComponent', 'color:magenta')\n          return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n        }\n\n      case IncompleteClassComponent:\n        {\n          var _Component2 = workInProgress.type;\n          var _unresolvedProps4 = workInProgress.pendingProps;\n\n          var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n          console.log('%c=beginWork()=end 19 mountIncompleteClassComponent', 'color:magenta')\n          return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n        }\n\n      case SuspenseListComponent:\n        {\n          console.log('%c=beginWork()=end 20 updateSuspenseListComponent', 'color:magenta')\n          return updateSuspenseListComponent(current, workInProgress, renderLanes);\n        }\n\n      case ScopeComponent:\n        {\n\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          console.log('%c=beginWork()=end 21 updateOffscreenComponent', 'color:magenta')\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n    }\n    throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n  }\n}\n")),(0,t.kt)("h3",{id:"\u91cd\u70b9code\u51fd\u6570\u521d\u59cb\u5316\u5728renderwithhooks\u8fd9\u91cc\u6267\u884c"},"\u91cd\u70b9\uff1acode\u51fd\u6570\u521d\u59cb\u5316\u5728renderWithHooks\u8fd9\u91cc\u6267\u884c"),(0,t.kt)("p",null,"mountIndeterminateComponent "),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u8c03\u7528  renderWithHooks \u751f\u6210 value"),(0,t.kt)("li",{parentName:"ul"},"\u6267\u884c reconcileChildren(null, workInProgress, value, renderLanes) \u53c2\u6570value")),(0,t.kt)("p",null,"\u5173\u952e\u7684\u51fd\u6570 renderWithHooks\uff1b\u800c\u5728 renderWithHooks \u4e2d\uff0c\u6211\u4eec\u4f1a\u6839\u636e\u7ec4\u4ef6\u5904\u4e8e\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u7ed9 ReactCurrentDispatcher.current \u6302\u8f7d\u4e0d\u540c\u7684 dispatcher \u3002\u800c\u5728first paint \u65f6\uff0c\u6302\u8f7d\u7684\u662fHooksDispatcherOnMountInDEV"),(0,t.kt)("p",null,"HooksDispatcherOnMountInDEV \u91cc\u5c31\u662f\u7ec4\u4ef6 first paint \u7684\u65f6\u5019\u6240\u7528\u5230\u7684\u5404\u79cd hooks"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n    // \u7701\u7565\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=mountIndeterminateComponent\u8c03\u7528renderWithHooks 1`, 'color:blueviolet', { workInProgress, Component, props, context, renderLanes })\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=mountIndeterminateComponent\u8c03\u7528renderWithHooks \u8fd4\u56de\u503c`, 'color:blueviolet', { value })\n    // \u7701\u7565\n\n   if (getIsHydrating() && hasId) {\n        pushMaterializedTreeId(workInProgress);\n      }\n      console.log('%c=reconcileChildren 12:\u91cd\u70b9\uff0cmountIndeterminateComponent\u8c03\u7528reconcileChildren', 'color:red')\n      reconcileChildren(null, workInProgress, value, renderLanes);\n\n      {\n        validateFunctionComponentInDev(workInProgress, Component);\n      }\n\n      return workInProgress.child;\n    }\n  }\n}\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n    // \u7701\u7565\uff1a\n    console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=renderWithHooks\u91cd\u70b9\uff0c\u8c03\u7528\u51fd\u6570\u7ec4\u4ef6\uff0c\u91cc\u9762\u6267\u884c\u5404\u79cd React Hook==start\u5e76\u8fd4\u56de ReactElement`, 'color:blueviolet', Component)\n    var children = Component(props, secondArg); // Check if there was a render phase update\n    console.log(`%c=\u63a2\u7a76\u521d\u59cb\u548chook=renderWithHooks\u91cd\u70b9,\u8fd4\u56de ReactElement==end`, 'color:blueviolet', { children })\n    // \u7701\u7565\uff1a\n    return children;\n}\n")),(0,t.kt)("p",null,"\u521d\u59cb\u5316--\x3emountChildFibers"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    console.log('%c=reconcileChildren mount', 'blueviolet');\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n    console.log('%c=reconcileChildren mount \u8fd4\u56de\u503cworkInProgress.child', 'blueviolet',workInProgress.child);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    console.log('%c=reconcileChildren update', 'yellow');\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n")),(0,t.kt)("h3",{id:"childreconciler"},"ChildReconciler"),(0,t.kt)("p",null,"\u4ece\u8be5\u51fd\u6570\u540d\u5c31\u80fd\u770b\u51fa\u8fd9\u662fReconciler\u6a21\u5757\u7684\u6838\u5fc3\u90e8\u5206\u3002\u90a3\u4e48\u4ed6\u7a76\u7adf\u505a\u4e86\u4ec0\u4e48\u5462\uff1f"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e mount \u7684\u7ec4\u4ef6\uff0c\u4ed6\u4f1a\u521b\u5efa\u65b0\u7684\u5b50 Fiber \u8282\u70b9\uff1b"),(0,t.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e update \u7684\u7ec4\u4ef6\uff0c\u4ed6\u4f1a\u5c06\u5f53\u524d\u7ec4\u4ef6\u4e0e\u8be5\u7ec4\u4ef6\u5728\u4e0a\u6b21\u66f4\u65b0\u65f6\u5bf9\u5e94\u7684 Fiber \u8282\u70b9\u6bd4\u8f83\uff08\u4e5f\u5c31\u662f\u4fd7\u79f0\u7684Diff \u7b97\u6cd5\uff09\uff0c\u5c06\u6bd4\u8f83\u7684\u7ed3\u679c\u751f\u6210\u65b0 Fiber \u8282\u70b9\u3002")),(0,t.kt)("p",null,"\u4e0d\u8bba\u8d70\u54ea\u4e2a\u903b\u8f91\uff0c\u6700\u7ec8\u4ed6\u4f1a\u751f\u6210\u65b0\u7684\u5b50 Fiber \u8282\u70b9\u5e76\u8d4b\u503c\u7ed9workInProgress.child\uff0c\u4f5c\u4e3a\u672c\u6b21 beginWork \u8fd4\u56de\u503c\uff0c\u5e76\u4f5c\u4e3a\u4e0b\u6b21performUnitOfWork\u6267\u884c\u65f6workInProgress\u7684\u4f20\u53c2\u3002"),(0,t.kt)("p",null,"mountChildFibers\u4e0ereconcileChildFibers\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u57fa\u672c\u4e00\u81f4\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff1areconcileChildFibers \u4f1a\u4e3a\u751f\u6210\u7684 Fiber \u8282\u70b9\u5e26\u4e0aeffectTag\u5c5e\u6027\uff0c\u800c mountChildFibers \u4e0d\u4f1a\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"var mountChildFibers = ChildReconciler(false);\n\n// \u8fd9\u4e2a\u4ee3\u7801\u5f88\u957f 1k\nfunction ChildReconciler(shouldTrackSideEffects) {\n\n}\n")),(0,t.kt)("p",null,"root.render(React.createElement(Test, null));\n\u8c03\u7528\u7684\u53c2\u6570\u662f\uff1aReact.createElement(Test, null)\u5904\u7406\u4e4b\u540e\u7684\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"var ReactElement = function (type, key, ref, self, source, owner, props) {\n    var element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n\n    return element;\n}\n")),(0,t.kt)("h2",{id:"\u7b2c\u4e09\u6b21-beginwork"},"\u7b2c\u4e09\u6b21 beginWork"),(0,t.kt)("p",null,"\u6b64\u65f6\u6784\u5efa code() \u751f\u6210\u7684\u8282\u70b9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"      case HostComponent:\n        console.log(`%c=beginWork()=end 7 updateHostComponent$1,\u5373\u539f\u751f DOM \u7ec4\u4ef6\u5bf9\u5e94\u7684 Fiber\u8282\u70b9:`, 'color:magenta', { type: workInProgress.type })\n        return updateHostComponent$1(current, workInProgress, renderLanes);\n")),(0,t.kt)("p",null,"\u6b64\u65f6 workInProgress"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"actualDuration:0\nactualStartTime:-1\nalternate:null\nchild:null\nchildLanes:0\ndeletions: null\ndependencies: null\nelementType:\"div\"\nflags: 0\nindex : 0\nkey : null\nlanes : 0\nmemoizedProps:null\nmemoizedState:null\nmode:1\npendingProps:{id: 'div1', className: 'c1', children: Array(4)}\nref:null\nreturn:FiberNode {tag: 0, key: null, stateNode: null, elementType: \u0192, type: \u0192, \u2026}\nselfBaseDuration:0,\nsibling:null\nstateNode:null\nsubtreeFlags:0\ntag:5\ntreeBaseDuration:0\ntype:\"div\"\nupdateQueue:null\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function updateHostComponent$1(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef$1(current, workInProgress);\n  console.log('=reconcileChildren 11')\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n")))}p.isMDXComponent=!0}}]);