"use strict";(self.webpackChunkprogramming_technology=self.webpackChunkprogramming_technology||[]).push([[5854],{3905:(n,e,t)=>{t.d(e,{Zo:()=>g,kt:()=>p});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=r.createContext({}),S=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},g=function(n){var e=S(n.components);return r.createElement(s.Provider,{value:e},n.children)},u="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,l=n.originalType,s=n.parentName,g=a(n,["components","mdxType","originalType","parentName"]),u=S(t),m=i,p=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return t?r.createElement(p,o(o({ref:e},g),{},{components:t})):r.createElement(p,o({ref:e},g))}));function p(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var l=t.length,o=new Array(l);o[0]=m;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=n,a[u]="string"==typeof n?n:i,o[1]=a;for(var S=2;S<l;S++)o[S]=t[S];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9511:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>S});var r=t(87462),i=(t(67294),t(3905));const l={},o=void 0,a={unversionedId:"backend/golang/go-\u5907\u4efd/go\u5907\u4efd",id:"backend/golang/go-\u5907\u4efd/go\u5907\u4efd",title:"go\u5907\u4efd",description:"",source:"@site/programming-tech/backend/golang/go-\u5907\u4efd/01-go\u5907\u4efd.md",sourceDirName:"backend/golang/go-\u5907\u4efd",slug:"/backend/golang/go-\u5907\u4efd/go\u5907\u4efd",permalink:"/backend/golang/go-\u5907\u4efd/go\u5907\u4efd",draft:!1,editUrl:"https://github.com/huiruo/programming-tech-website/edit/main/programming-tech/backend/golang/go-\u5907\u4efd/01-go\u5907\u4efd.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"\u7c7b\u578b\u8f6c\u6362",permalink:"/backend/golang/\u7c7b\u578b\u8f6c\u6362"},next:{title:"mysql-insert",permalink:"/backend/mysql/mysql-insert"}},s={},S=[],g={toc:S},u="wrapper";function c(n){let{components:e,...t}=n;return(0,i.kt)(u,(0,r.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func updateKline2(kline binance.WsKline) {\n    var updateSql strings.Builder\n    updateSql.WriteString("UPDATE kline_")\n    updateSql.WriteString(kline.Interval)\n\n    updateSql.WriteString(" SET firstTradeId = ")\n    updateSql.WriteString(strconv.FormatInt(kline.FirstTradeID, 10))\n\n    updateSql.WriteString(",lastTradeId = ")\n    updateSql.WriteString(strconv.FormatInt(kline.LastTradeID, 10))\n\n    updateSql.WriteString(",open = ")\n    updateSql.WriteString(kline.Open)\n\n    updateSql.WriteString(",close = ")\n    updateSql.WriteString(kline.Close)\n\n    updateSql.WriteString(",high = ")\n    updateSql.WriteString(kline.High)\n\n    updateSql.WriteString(",low = ")\n    updateSql.WriteString(kline.Low)\n\n    updateSql.WriteString(",volume = ")\n    updateSql.WriteString(kline.Volume)\n\n    updateSql.WriteString(",trades = ")\n    updateSql.WriteString(strconv.FormatInt(kline.TradeNum, 10))\n\n    updateSql.WriteString(",final = ")\n    updateSql.WriteString(strconv.FormatBool(kline.IsFinal))\n\n    updateSql.WriteString(",quoteVolume = ")\n    updateSql.WriteString(kline.QuoteVolume)\n\n    updateSql.WriteString(",volumeActive = ")\n    updateSql.WriteString(kline.ActiveBuyVolume)\n\n    updateSql.WriteString(",quoteVolumeActive = ")\n    updateSql.WriteString(kline.ActiveBuyQuoteVolume)\n\n    updateSql.WriteString(" WHERE startTime = ")\n    updateSql.WriteString(strconv.FormatInt(kline.StartTime, 10))\n    updateSql.WriteString(" AND endTime = ")\n    updateSql.WriteString(strconv.FormatInt(kline.EndTime, 10))\n    updateSql.WriteString(" LIMIT 1")\n\n    fmt.Println("\u66f4\u65b0 sql:", updateSql.String())\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func insertKline2(kline binance.WsKline) {\n    var insertSql strings.Builder\n    insertSql.WriteString("INSERT INTO kline_")\n    insertSql.WriteString(kline.Interval)\n\n    insertSql.WriteString(" SET symbol = \'")\n    insertSql.WriteString(kline.Symbol)\n    insertSql.WriteString("\',intervalTime = \'")\n    insertSql.WriteString(kline.Interval)\n\n    insertSql.WriteString("\',startTime = ")\n    insertSql.WriteString(strconv.FormatInt(kline.StartTime, 10))\n    insertSql.WriteString(",endTime = ")\n    insertSql.WriteString(strconv.FormatInt(kline.EndTime, 10))\n\n    insertSql.WriteString(",firstTradeId = ")\n    insertSql.WriteString(strconv.FormatInt(kline.FirstTradeID, 10))\n\n    insertSql.WriteString(",lastTradeId = ")\n    insertSql.WriteString(strconv.FormatInt(kline.LastTradeID, 10))\n\n    insertSql.WriteString(",open = ")\n    insertSql.WriteString(kline.Open)\n\n    insertSql.WriteString(",close = ")\n    insertSql.WriteString(kline.Close)\n\n    insertSql.WriteString(",high = ")\n    insertSql.WriteString(kline.High)\n\n    insertSql.WriteString(",low = ")\n    insertSql.WriteString(kline.Low)\n\n    insertSql.WriteString(",volume = ")\n    insertSql.WriteString(kline.Volume)\n\n    insertSql.WriteString(",trades = ")\n    insertSql.WriteString(strconv.FormatInt(kline.TradeNum, 10))\n\n    insertSql.WriteString(",final = ")\n    insertSql.WriteString(strconv.FormatBool(kline.IsFinal))\n\n    insertSql.WriteString(",quoteVolume = ")\n    insertSql.WriteString(kline.QuoteVolume)\n\n    insertSql.WriteString(",volumeActive = ")\n    insertSql.WriteString(kline.ActiveBuyVolume)\n\n    insertSql.WriteString(",quoteVolumeActive = ")\n    insertSql.WriteString(kline.ActiveBuyQuoteVolume)\n\n    fmt.Println("\u63d2\u5165 sql:", insertSql.String())\n    rows, error := DataS.Query(insertSql.String())\n    if error != nil {\n        fmt.Println("\u9519\u8bef\uff1a", error)\n    }\n\n    fmt.Println("rows", rows)\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\n    var querySql strings.Builder\n    querySql.WriteString("SELECT startTime,endTime FROM kline_")\n    querySql.WriteString(kline.Interval)\n    querySql.WriteString(" WHERE startTime = ")\n    querySql.WriteString(strconv.FormatInt(startTime, 10))\n    querySql.WriteString(" AND endTime = ")\n    querySql.WriteString(strconv.FormatInt(endTime, 10))\n    querySql.WriteString(" LIMIT 1")\n\n    fmt.Println("sql:", querySql.String())\n    rows, error := DataS.Query(querySql.String())\n    check(error)\n\n    count := 0\n\n    var start, end int64\n    rows.Scan(&start, &end)\n    for rows.Next() {\n        count += 1\n        rows.Columns()\n        rows.Scan(&start, &end)\n    }\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func queryTest() {\n    rows, error := DataS.Query("select symbol, `interval` from kline_15m where trades = 11289")\n    if error != nil {\n        fmt.Println("\u9519\u8bef\uff1a", error)\n    }\n    var symbol, intervalTime string\n    rows.Scan(&symbol, &intervalTime)\n    fmt.Println(symbol, "--")\n    for rows.Next() {\n        rows.Columns()\n        rows.Scan(&symbol, &intervalTime)\n        fmt.Println(symbol, "--")\n        fmt.Println(intervalTime, "--")\n    }\n}\n')))}c.isMDXComponent=!0}}]);